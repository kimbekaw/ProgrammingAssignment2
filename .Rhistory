x=c(55,85,90,50,110,115,75,85,8,23,70,65,50,60,90,90,55,70,5,31)
summary(x)
sd(x)
save.image("C:\\Users\\Kimberly\\Desktop\\STAT 3502\\Assignments\\assign1_1")
q()
swirl()
swirl
library(swirl)
swirl()
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
mydata<-sample(c(y,z),100)
mydata<-sample(c(y,z),100))
myData<-sample(c(y,z),100)
myNA<-is.na(myData)
myNA
myData == NA
sum(myData)
sum(myNA)
myData
0/0
Inf-Inf
swirl()
0
info()
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
myData<-sample(c(y,z),100)
myNA<-is.na(myData)
myNA
myData == NA
sum(myNA)
myData
0/0
Inf-Inf
x
x[1:10]
x[is.na(s)]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
play()
x[!is.na(x) & x<0]
x
nxt()
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[1c(2,10)]
x[-c(2,10)]
vect<-c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
exit
exit()
library(swirl)
swirl()
myVector<-c(1:20)
myVector<-1:20
myVector
dim(myVector)
length(myVector)
dim(myVector)<-c(4,5)
dim(myVector)
attributes(myVector)
myVector
class(myVector)
myMatrix<-myVector
?matrix
myMatrix2<-matrix(data=1:20,nrow=4,ncol=5,byrow=T)
myMatrix2<-matrix(1:20,4,5,T)
myMatrix2<-matrix(1:20,4,5)
myMatrix==myMatrix2
identical(myMatrix,myMatrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,myMatrix)
myData<-data.frame(patients,myMatrix)
myData
class(myData)
cnames<-c("patient","age","weight","bp","rating","test")
?colnames
colnames(myData)<-cnames
myData
getwd()
dir()
x<-1:20
above <- function(x,n = 10){ #n's default value is 10
use <- x > n
print(use)
x[use]
}
above(x,12)
setwd("D:/Coursera/R Programming/Assignments/assign2_repo/ProgrammingAssignment2")
?source
?load
ls()
search()
source("cachematrix.R")
a <- makeCacheMatrix(matrix(1:4,2))
a
a$get()
a$getinverse()
a$set(matrix(5:8,2))
a$get()
source("cachematrix.R")
a$get
a$get()
cacheSolve(a)
a <- makeCacheMatrix(matrix(1:4,2))
source(cachematrix.R)
source(cachematrix.R)
source("cachematrix.R")
a <- makeCacheMatrix(matrix(1:4,2))
a$set(matrix(5:8,2))
a$get()
cacheSolve(a)
solve(a$get())
a
cacheSolve(a$get())
source("cachematrix.R")
cacheSolve(a)
cacheSolve(a)
a$getinverse()
b=a$getinverse()
a$get() %*% b
source("cachematrix.R")
c <- makeCacheMatrix(matrix(1:4,2))
c$get()
cacheSolve(c)
d <- c$getinverse()
d
c$get() %*% d
